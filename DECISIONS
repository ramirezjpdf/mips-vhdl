20/04/2016

Instruction jr -> PCWriteCond = '0'
                  PCWrite = '1',
                  IorD = '0'
                  MemRead = '0'
                  MemWrite = '0'
                  MemToReg = X
                  IRWrite = '0'
                  RegWrite = '0',
                  RegDst = X
                  ALUop = X, 
                  ALUSrcA = '0', 
                  ALUSrcB = "00", 
                  PCSource = "00"
                  
-- In this instruction the  porcessor needs to put the value of PC+4 in the register $ra beside jump to the especified address.
Instruction jal -> PCWriteCond = '0'
                  PCWrite = '1',
                  IorD = '0'
                  MemRead = '0'
                  MemWrite = '0'
                  MemToReg = "10"   -- Add new case to force the value of PC+4.
                  IRWrite = '0'
                  RegWrite = '1',
                  RegDst = '10'     -- Add new case to force the address of register $ra.
                  ALUop = X, 
                  ALUSrcA = X, 
                  ALUSrcB = X, 
                  PCSource = "10"
                  
Instruction bne -> create a new control signal (bne_cond) in control unit. this new signal is
                   XORed with the ZERO alu output.
Instruction jr -> create a new output signal (jr_signal) in alu_control unit. We also added
                  a new mux that after the mux controlled by pc_source control signal.
                  Moreover, we wired the pc register the fourth in port of the mux controlled by pc_source control signal.
                  the new mux is controlled by jr signal.

Instruction Addi -> PCWriteCond = '0' 
                  PCWrite = '0',
                  IorD = '0'  -- state 1
                  MemRead = '0'
                  MemWrite = '0'
                  MemToReg = "X"   -- state 2
                  MemToReg = "0"   -- state 4
                  IRWrite = '0'
                  RegWrite = '0',  -- state 2
                  RegWrite = '1',  -- state 4
                  RegDst = '10'     -- state 2
                  RegDst = '00'     -- state 4
                  ALUop = '00', 
                  ALUSrcA = '1',   --state 2
                  ALUSrcB = '10',  --state 2
                  PCSource = "X"

Test instructions:

addi $s0, $t0, 1
addi $s1, $t1, 1
add $s0, $s1, $s0
sw $s0, 10($t1)
lw $s2, 10($t1) 

13/05/2016

Floating-point instructions  

instruction   opcode    fmt      rt       rs       rd     funct
  add.s       010001   10000   5 bits   5 bits   5 bits   000000
  sub.s       010001   10000   5 bits   5 bits   5 bits   000001
  mul.s       010001   10000   5 bits   5 bits   5 bits   000010
  div.s       010001   10000   5 bits   5 bits   5 bits   000011
  sqr.s       010001   10000   5 bits   5 bits   5 bits   000100

The 5 bits 'fmt' field determine whether the operation is single precision (10000) or double precision (10001). 
In this project we only work with single precision.

18/05/2016
FPU Test Instructions:

Note: In memory positions 14 and 15, there are 2.0 and 3.25, respectively,
in IEEE 754 single precision floating point format.

X: LW $T0, 14($ZERO)
LW $T1, 15($ZERO)
ADD.S $T2, $T0, $T1
OUT_LED
J X

X: LW $T0, 14($ZERO)
LW $T1, 15($ZERO)
SUB.S $T2, $T0, $T1
OUT_LED
J X

X: LW $T0, 14($ZERO)
LW $T1, 15($ZERO)
MUL.S $T2, $T0, $T1
OUT_LED
J X

X: LW $T0, 14($ZERO)
LW $T1, 15($ZERO)
DIV.S $T2, $T0, $T1
OUT_LED
J X

X: LW $T0, 14($ZERO)
LW $T1, 15($ZERO)
SQR.S $T2, $T0, $T1
OUT_LED
J X

-- Complex Instruction
For now,
name   |       meaning                 |  OPCODE  |
DIVADD | R[rd] = R[rs] / R[rt] + R[rt] |  010010  |

The plan is to be R[rd] = R[rs] / R[rt] + R[rd]

format:
31____26_25____21_20____16_15_____11_10_____6_5______0
|__OP__|_|_fmt__|_|__rs__|_|__rt__|__|__rd__|_|unused|